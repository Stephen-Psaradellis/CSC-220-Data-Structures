1. To try it out, download the contents of dist to your home directory.  Run

	java -jar prog02.jar

   or double click on it.  You have to have csc220.txt in the SAME
   directory.


2. Go into doc in the browser and look at the documentation for the
   PhoneDirectory interface and the UserInterface interface.


3. For each command in #1, decide which methods in #2 it is calling.


4. In Eclipse, create the prog02 package in your csc220 project and
   download source files into workspace/csc220/src/prog02 directory.
   Refresh.


5. Download dist/csc220.txt file into workspace/csc220 project
   directory.  Refresh the project so it appears in Eclipse.


6. Implement processCommands in Main.  The TA will do case 0 with you
   as I did in class to get you started.


HOMEWORK

For homework, you will implement SortedPD which stores the entries in
order by name and uses binary search to find entries.


7. Copy the methods add, find, and removeEntry to the SortedPD class,
   including their Javadoc comments.

   Visit http://www.cs.miami.edu/~vjm/csc220/prog02/dist/csc220.txt
   and save this file to your workspace/csc220 directory.  Refresh
   your csc220 project in Eclipse (right click --> refresh or click
   and F5).  csc220.txt should appear in the project.  Visit it by
   double clicking.  You should see

Victor
vjm@cs.miami.edu
Irina
irina@cs.miami.edu
Parul
p.maheshwari@umiami.edu
Lance
l.levine4@umiami.edu
Joe
j.masterjohn@umiami.edu

   Run Main, and tell the program to remove Irina and save.  Refresh
   the csc220.txt window in Eclipse.  You should see

Victor
vjm@cs.miami.edu
Joe
j.masterjohn@umiami.edu
Parul
p.maheshwari@umiami.edu
Lance
l.levine4@umiami.edu

   Why?  Because the way it removes Irina is by copying the last entry
   (Joe) into the same location.


8. Exit the program (click EXIT).  Restore csc220.txt by saving it
   from the browser again and refreshing the window in Eclipse.
   Modify removeEntry (in SortedPD) so instead of copying entry
   [size-1] on top of entry [index] it moves entries [index+1] to
   [size-1] each back one as indicated in the slides.  Now when you
   run Main, remove Irina, and save, and refresh csc220.txt, you
   should see

Victor
vjm@cs.miami.edu
Parul
p.maheshwari@umiami.edu
Lance
l.levine4@umiami.edu
Joe
j.masterjohn@umiami.edu

   Do not modify add or find until you have this working.  Use the
   visual debugger and compare it to my slides.


9. In the add method, call find as in removeEntry.  Since the item is
   not there yet, fo.found will be false.  Set a variable
   insertionIndex to fo.index.  Move every entry to the right of
   insertionIndex forward and then put the new entry at
   insertionIndex.  To test add, set insertionIndex=0 before
   inserting.  Checking csc220.txt as for removeEntry, make sure that
   new entries have been inserted at index 0, the first location. This
   will also reverse the order of the existing entries.  (Why?)  Once
   that is working, comment out the line insertionIndex=0 so it is
   fo.index as it should be.

   Sometimes testing involves using incorrect values, temporarily, to
   see what happens.


10. Now it is time to change find so it uses binary search.  Do we
    need to sort the input file?  No!  Why not?  Object oriented
    programming.  The loadData method in ArrayBasedPD will call *your*
    add to add each entry.  Your add will call *your* find method.
    Your find method will tell your add method where to put the
    entries so it will be sorted.  If this makes your head explode,
    don't worry about it.  Just trust the fact that if every method
    does its job properly, the whole thing will work!

    To find an entry with a given name using binary search, you will
    need to be able to compare strings.
 
	String name1 = "Victor";
	String name2 = "Vincent";
	int cmp = name1.compareTo(name2); // The value is -11.  Why?
 
    The compareTo methods returns 

	a negative integer if name1 comes before name2,
	a positive integer if name1 comes after name2,
	zero if name1 equals name2.

    Again throw away the appropriate portion in your copy of find.

    Initialize first to the index of the first entry and last to the
    index of the last entry.

	While first is not greater than last
	  Set middle equal to the index midway between first and last.

 	  Compare the name to be inserted to the name of the entry at
 	  index middle and put the result of the comparison into cmp
 	  (which will be < 0, == 0, or > 0).

	  If cmp equals zero, youâ€™re done. (What do you do? Hint: read
	  the description of find.)

	  If cmp is negative, set last equal to the index before middle.
	  If cmp is positive, set first equal to the index after middle.
	  If you haven't returned yet, what should you return?

    Test your program.  Restore csc220.txt from the browser, run Main,
    and add you, and refresh the csc220.txt window in Eclipse.  You
    should see.

Irina
irina@cs.miami.edu
Joe
j.masterjohn@umiami.edu
Lance
l.levine4@umiami.edu
Parul
p.maheshwari@umiami.edu
Victor
vjm@cs.miami.edu


