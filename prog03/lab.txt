Quick IQ test:  what's the next number in this sequence?

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ?

This is the famous Fibonacci sequence.

For this lab, you will create implementations of the Fibonacci
sequences with different running times and test your ability to
predict their running times using the O() analysis you learned in
class.

I have put lots of comments already into Main.java to guide you.
LEAVE THE COMMENTS THERE so you can check you have done each step.

0. Test prog03.jar.

   Try different starting buttons.  Each has a different O() time:
   O(1), O(log n), O(n) and O(phi^n)

   The last one is phi to the n'th power, where

	phi = (sqrt(5)+1)/2 = 1.61803399...


1. Run Eclipse.  Create package prog03 and install the java files I provided.

   Implement Main.time(fib, n) and Main.averageTime(fib, n, ncalls).

   Run Main.  You should see something like this:

prog03.ExponentialFib@7ac260c5
0 0.0
1 1.0
2 1.0
3 2.0
4 3.0
5 5.0
6 8.0
7 13.0
8 21.0
9 34.0
10 55.0
n1 20 time1 94.46656500000046
c 0.006244897561501395
n2 30 estimated time 11618.619423374877
n2 30 actual time 10657.382309999997

What the program did was use the running time on n=20 to determine the
constant and then estimate the running time for n=30.


2. I picked 1000 calls for n1 and 100 calls for n2.  We learned a
   formula in class for the right number of calls to get three figures
   of accuracy.  How many calls should I have used for n1?  Add a line
   to calculate ncalls, the right number of calls, using the
   previously calculated time.  Measure the average time using the new
   n1.  Print out ncalls, n1, and time1.


3. Ditto n2, and time2.  Oops, ncalls is zero because time2 is so big.
   If it is zero, set it to 1.  (It will be smaller for other
   implementations of Fib.)


3. Using the comments I provided, write Main.accurateTime(fib, n),
   which does the same thing automatically.  Add lines to run and
   print out the result of accurateTime for n1 and n2.


4. Add code to estimate how long it would take to compute fib(100).
   Would it finish running before end of lab?  If not, when will it
   finish?

prog03.ExponentialFib@64fde8da
0 0.0
1 1.0
2 1.0
3 2.0
4 3.0
5 5.0
6 8.0
7 13.0
8 21.0
9 34.0
10 55.0
n1 20 time1 111.3127639999998
ncalls 80
n1 20 time1 100.26851249999996
n1 20 time1 98.63825714285716
c 0.0065206754527612305
n2 30 estimated time 12131.703638507872
n2 30 actual time 12166.269819999996
ncalls 0
n2 30 time2 12090.391
n2 30 time2 12075.996
n3 100 estimated time [what do you get?]
which is [what do you get?] years


5. Implement LinearFib which computes fib(n) in O(n) time.  How?  Set
   a=0 and b=1.  What do you have to do to make a=1 and b=1?  a=1 and
   b=2?  a=2 and b=3?


   What should the o() method return?


5. Switch to LinearFib in labExperiments.


6. Ditto LogFib.  LogFib.pow uses the gold coin idea to implement the
   pow method in O(log n) time.


7. Implement ConstantFib, which should re-implement pow again, this
   time just calling Math.pow to do the calculation.  Math.pow runs in
   O(1) time.  Take MTH320 if you want to know how!


FOR HOMEWORK

8. Write (fill in) a method hwExperiments() in Main.

   It should give the user the choice of testing one of the four Fib
   implementations (or exiting) and then call hwExperiments(fib) on
   that one.

   To use a class or interface from prog02, just put, for example,

	import prog02.GUI;

   at the top of Main.java.

   I have already done this for you and set ui equal to a GUI object.
   Just use ui.getCommands, etc.


9. Write a method hwExperiments(Fib fib) in Main.

   It should repeatedly prompt the user for n using GUI.java and stop
   (return) when the user clicks CANCEL.

   If this is not the first n, it should use the constant from the
   previous n to estimate the time for the current n and display that
   estimate.

   For each n, it should call accurateTime(fib, n) to get a good time
   for n, and figure out the new constant.  Display the value of n,
   fib(n), and the actual time.


10. Add code to ask the user before doing the experiment if the
    estimated time is more than an hour.

