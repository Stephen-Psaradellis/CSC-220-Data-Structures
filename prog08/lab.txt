Tree.java will be another implementation of a Java Map.  The Node class
has data, left, and right.  In a binary search tree, left is less and
right is greater.

The toString method prints tree sideways.  You have to turn your head
to the left to get the traditional view.  So for instance, when it
prints

    Zoe 3
Victor 6
    Lisa 4
        Hal 3

it is really the tree

		Victor 6
	Lisa 4		Zoe 3
      Hal 3

0. Create package prog08 and add Tree.java and Heap.java.

1. In Tree.java, implement the private find method using the notes
   from yesterday.  Methods in Tree should use RECURSION not iteration.

2. Implement the private add method using the notes.  Remember that
   you need to say Node<K,V> instead of Node so it works generically.
   Make sure you understand what every line does.  The TA can do some
   examples on the board.  Now, implement the public put method using
   add.  What do you do with the value add returns?

   Test the program.  The output should be as follows.  Victor won't
   be removed because remove is not implemented yet, but the value
   will be changed by the second put.

    Zoe 3
Victor 6
    Lisa 4
        Hal 3

    Zoe 3
Victor 6
    Lisa 4
        Hal 3

    Zoe 3
Victor 10
    Lisa 4
        Hal 3


3. Delete the first two lines from the public remove method.
   Implement the private remove method based on the notes.  It will
   call removeRoot.


SKIP TO STEP 8 IN THE LAB AND DO 4-7 FOR HOMEWORK


4. Write a method getRightmost which returns the rightmost Node in a
   tree.  Fill in the method in Tree.java.

5. Write a method removeRightmost which removes the rightmost Node
   from a tree and returns the resulting tree.

6. Implement removeRoot which removes the root node from a tree and
   returns the (new) root of the modified tree.

7. Copy Jumble.java from prog07 into prog08 and change the package
   name at the top of the file.  Switch it from using SkipList to
   using Tree.  Is it fast enough to load "dict"?  Is it as fast as
   using TreeMap (from java.util)?  Why or why not?


8. In Heap, go over all the methods up to and including offer.  Make
   sure you understand them.  Implement poll().  It uses ITERATION.

For the final loop, what's the condition on the while?

	The parent (the item being moved down) is greater than one of its
	children.

How do you say this in Java:

	parent is greater than its left child or parent is greater than its
	right child

More specifically

	parent has a left child and is greater than that child
	or
	parent has a right child and is greater than that child

Once you have this condition, then you need to do the inside of the loop:

	swap parent with the smaller child

More specifically

	if right child is less than left child
	then swap parent with right
	else swap parent with left

Can you get the logic right?  Remember, the parent might not HAVE a
right child.  Who wins then?  Make sure the if condition handles this case.


9. Implement peek and iterator.  iterator can just return the Iterator
   it gets from theData.


HOMEWORK DO 4-7 ABOVE AND THE FOLLOWING

10. Add code to WordPath so it displays a message about how many times
   it polls the queue.  (Poll is expensive because you have the check
   the entire dictionary for neighbors.)

   Add a class NodeComparator that implements Comparator<Node>.

   a. Its constructor NodeComparator(target) should take the target as
      an argument and store it inside NodeComparator.

   b. A value method value(node) takes a Node and returns the number of
      links back to start PLUS the number of letters different from target.
 
   c. A compare method compare(node1, node2) should return < 0 if
      node1 has smaller value, = 0 if they have the same value, and > 0
      otherwise.

   Switch to using a PriorityQueue<Node> using your Comparator.
   (Check the documentation, this constructor also requires an initial
   capacity.  Use 1000.)  How many words does it dequeue now?


11. Now switch to using your Heap using your Comparator.  It should
    run the same.  Switch back to PriorityQueue for the next part.


12. Unfortunately, you will also notice that the solution for "snow"
    to "rain" is LONGER than before.  Here is how to fix this.

    Implement the remove method in Heap.

    When WordPath solve dequeues a node and looks at all elements of
    the dictionary for neighbors, it SHOULD look at next nodes which
    have next.previous set already.  If

	distanceToStart(node)+1 < distanceToStart(next)

    then setting next.previous=node will give next a shorter path back
    to start.  First, remove next from the heap, then change
    next.previous, and finally put it back into the heap.

    solve() should now find the same length solution for snow to rain
    but dequeue far fewer words than the prog07 solve().

    Switch back to Heap and make sure it still works right.



